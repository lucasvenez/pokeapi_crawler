# -*- coding: utf-8 -*-
"""Poke_API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DzTAcf_dDElMZNjXa0IeIq49yLnF6u1l
"""

import requests

#URL -> GET, POST, DELETE, PATCH, PUT
response = requests.get("https://pokeapi.co/api/v2/pokemon/1")

response.json()

response = requests.get("https://pokeapi.co/api/v2/ability/?limit=20&offset=20");

response.json()

"""## Obtendo um pokemon por seu id"""

response = requests.get("https://pokeapi.co/api/v2/berry/1/")

response.json()

"""## Obtendo um pokemon pelo seu nome"""

response = requests.get("https://pokeapi.co/api/v2/berry/cheri/")

response.json()

"""# Criar uma classe Pokemon com um método construtor que receba um id inteiro de um pokemon e que a partir desse id, nós podemos recuperar os métodos get_name, get_id e get_order associado a esse pokemon. É preciso requisitar essa url, e fazer o parse disso dentro dos devidos atributos """

response = requests.get("https://pokeapi.co/api/v2/berry/cheri/")
string_json = response.json()
print(string_json)

content = '''{
  "id": "1",
  "name": "cheri"
}'''

import json

data = json.loads(content)

print(data.get("id"))
print(data.get("name"))

response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

class Pokemon:
  def __init__(self, name, id):
    self.name = name;
    self.id = id;
  def getName(self):
    return self.name;
  def getId(self):
    return self.id;
  def exib(self):
    return print("Name: ", self.name + "\nId: ", self.id);

name = data.get("name");
id = data.get("id");

pokemon = Pokemon(name, id)

pokemon.exib();